[tox]
# Environments selected for frequent execution during development
# Let's still include pep8-check despite a preceding autopep8 run to filter out certain errors
# (like W293 blank line in multiline strings contains whitespace)
# that don't seem to ever get fixed by autopep8.
envlist = pep8,isort,pep8-check,mypy-py311
minversion = 2.3.2
skipsdist = True

[testenv]
setenv =
  VIRTUAL_ENV={envdir}
  PYTHONWARNINGS=default::DeprecationWarning,ignore:The distutils package is deprecated,ignore:The distutils.sysconfig module is deprecated,ignore:the imp module is deprecated,ignore:SelectableGroups dict interface is deprecated
usedevelop = False
install_command =
  pip install {opts} {packages}
deps =
  -r{toxinidir}/requirements.testenv.txt
allowlist_externals = mkdir
commands =
  mkdir -p test-results/
  pytest --numprocesses=auto --junitxml=test-results/testenv-{envname}.xml {posargs}

[testenv:py36]
deps =
  -r{toxinidir}/requirements.testenv.py36-txt

[testenv:pep8]
description = "Apply PEP8 formatting"
deps =
  -r{toxinidir}/requirements.pep8.txt
# E402 - Module level import not at top of file
commands =
  autopep8 --ignore=E402 --in-place --recursive .

[testenv:pep8-check]
description = "Check if formatting conforms to PEP 8"
deps =
  -r{toxinidir}/requirements.pep8-check.txt
commands = flake8 --enable-extensions=FS003

# Set flake8 configuration options which are used by the `flake8` command in [testenv:pep8] and [testenv:pep8-check]
[flake8]
# W291 trailing whitespace in multiline strings
# W504 ignore wrap line after binary operator
ignore = W291, W504
show-source = True
max-line-length = 140
exclude = ./.*,build,dist,*egg,venv, git_machete/generated_docs.py
import-order-style = pep8

[testenv:isort]
description = "Tidy up imports in Python code"
deps =
  -r{toxinidir}/requirements.isort.txt
commands =
  autoflake --in-place --recursive --remove-all-unused-imports .
  isort .

[testenv:isort-check]
description = "Check if imports in Python code are correctly sorted"
deps =
  -r{toxinidir}/requirements.isort.txt
commands = isort --check-only .

[testenv:vulture-check]
description = "Run `vulture` static code analyzer to detect unused code"
deps =
  -r{toxinidir}/requirements.vulture-check.txt
commands = vulture git_machete/ tests/

[testenv:venv]
commands = {posargs}

[testenv:coverage]
description = "Check the test coverage of the code"
deps =
  -r{toxinidir}/requirements.coverage.txt
commands =
  coverage erase
  # Generates .coverage binary file, used as the source of truth for the subsequent reports
  # Note that coverage (as of v7.2.3) doesn't support parallel running (`--numprocesses=...`) via python-xdist
  coverage run --branch --omit='tests/*' -m pytest --junitxml=test-results/testenv-{envname}.xml {posargs}
  # Prints a report to console
  coverage report
  # Saves a report to htmlcov/
  coverage html
  # Saves a report to coverage.xml (uploaded to Codecov from CI, as Codecov apparently does not accept .coverage binary files)
  coverage xml

[coverage:report]
exclude_lines =
  except EOFError:
  except KeyboardInterrupt:
  if __name__ == .__main__.:
  pragma: no cover

# Python 3.11 is needed in envs that use Sphinx due to https://github.com/VirtusLab/git-machete/issues/936

[testenv:sphinx-html]
basepython=3.11
description = "Build Sphinx documentation in HTML"
allowlist_externals = bash
deps =
  -r{toxinidir}/requirements.sphinx-docs.txt
commands =
  bash docs/generate-sphinx-html.sh docs/html

[testenv:sphinx-man]
basepython=3.11
description = "Build Sphinx documentation in groff format (Unix man page)"
allowlist_externals = bash
deps =
  -r{toxinidir}/requirements.sphinx-docs.txt
commands =
  bash docs/generate-sphinx-man.sh docs/man

[testenv:sphinx-man-check]
basepython=3.11
description = "Check if Unix man page is up to date with reStructuredText sources"
allowlist_externals = bash
deps =
  -r{toxinidir}/requirements.sphinx-docs.txt
commands =
  bash docs/enforce-sphinx-man-up-to-date.sh

[testenv:py-docs]
description = "Build Python documentation"
# The generation of the python docs uses git_machete package
allowlist_externals = bash
deps =
  -r{toxinidir}/requirements.py-docs.txt
commands =
  bash -c "python docs/generate_py_docs.py > git_machete/generated_docs.py"

[testenv:py-docs-check]
description = "Check if Python documentation is up to date with with reStructuredText sources"
allowlist_externals = bash
deps =
  -r{toxinidir}/requirements.py-docs.txt
commands =
  bash docs/enforce-py-docs-up-to-date.sh

[testenv:mypy-py36]
deps =
  -r{toxinidir}/requirements.mypy.py36-txt
commands =
  mypy --config-file mypy.ini git_machete tests

[testenv:mypy-py{37,38,39,310,311}]
deps =
  -r{toxinidir}/requirements.mypy.txt
commands =
  mypy --config-file mypy.ini git_machete tests
