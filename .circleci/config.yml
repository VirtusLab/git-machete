version: 2.1

executors:
  ubuntu_executor:
    machine:
      image: ubuntu-2004:202111-02
    environment:
      # Needed to avoid warning: https://superuser.com/questions/575844/warning-terminal-is-not-fully-functional
      TERM: ansi

mandatory_jobs: &mandatory_jobs
  - initial checks
  - test against python 3_6 and git 1_8_10
  - test against python 3_7 and git 2_7_6
  - test against python 3_8 and git 2_25_0 with PEP8 checks
  - test against python 3_9 and git 2_30_1 with coverage report and docs creation
  - test against python 3_10 and git 2_33_1

jobs:
  "initial checks":
    executor: ubuntu_executor
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # For ensure-completion-scripts-correct.sh
            sudo apt-get update
            sudo apt-get install zsh fish

            # For ensure-links-correct.sh
            npm install --global remark-cli remark-lint-no-dead-urls remark-validate-links
      - run:
          name: Perform initial checks
          command: |
            # We don't want `less` to open for `git grep` results.
            export GIT_PAGER=cat

            PATH=./ci/checks:$PATH
            set -x
            enforce-correct-shebangs.sh
            enforce-indent-two-spaces-outside-python.sh
            enforce-issue-number-for-todos.sh
            ensure-completion-scripts-correct.sh
            ensure-links-correct.sh
            ensure-version-bumped.sh
            prohibit-tab-character.sh
            prohibit-trailing-whitespace.sh

  "test against python 3_6 and git 1_8_10":
    executor: ubuntu_executor
    steps:
      - checkout
      - run:
          name: Run tests against Python 3.6 and git 1.8.0
          command: PYTHON_VERSION=3.6 GIT_VERSION=1.8.0  bash ci/tox/ci-run.sh # Earliest versions of python/git supported by git-machete

  "test against python 3_7 and git 2_7_6":
    executor: ubuntu_executor
    steps:
      - checkout
      - run:
          name: Run tests against Python 3.7 and git 2.7.6
          command: PYTHON_VERSION=3.7 GIT_VERSION=2.7.6  bash ci/tox/ci-run.sh

  "test against python 3_8 and git 2_25_0 with PEP8 checks":
    executor: ubuntu_executor
    steps:
      - checkout
      - run:
          name: Run tests against Python 3.8 and git 2.25.0 (check PEP8 correctness)
          command: PYTHON_VERSION=3.8 GIT_VERSION=2.25.0 PEP8=true bash ci/tox/ci-run.sh

  "test against python 3_9 and git 2_30_1 with coverage report and docs creation":
    executor: ubuntu_executor
    steps:
      - checkout
      - run:
          name: Run tests against Python 3.9 and git 2.30.1 (with checking coverage and building documentation)
          command: PYTHON_VERSION=3.9 GIT_VERSION=2.30.1 CHECK_COVERAGE=true BUILD_DOCS=true bash ci/tox/ci-run.sh
      - store_artifacts:
          path: htmlcov
          destination: coverage
      - store_artifacts:
          path: docs/html
          destination: docs

  "test against python 3_10 and git 2_33_1":
    executor: ubuntu_executor
    steps:
      - checkout
      - run:
          name: Run tests against Python 3.10 and git 2.33.1
          command: PYTHON_VERSION=3.10 GIT_VERSION=2.33.1 bash ci/tox/ci-run.sh

  "dry run deploy":
    executor: ubuntu_executor
    steps:
      - checkout
      - deploy:
          name: '[Dry run] Deploy to PyPI'
          # Side effects: does an actual release, but to the test PyPI
          command: bash ci/pypi/ci-deploy.sh --dry-run

      - deploy:
          name: '[Dry run] Update Homebrew tap with local installation test'
          # Prerequisites: artifacts must be released to test PyPI first
          command: bash ci/homebrew-tap/ci-deploy.sh --dry-run

      - deploy:
          name: '[Dry run] Build & upload deb package to PPA'
          # Side effects: potentially pushes a regenerated Docker image
          command: bash ci/deb-ppa-upload/ci-deploy.sh --dry-run

      - deploy:
          name: '[Dry run] Build .snap for linux distros'
          # Build snap for current branch of git-machete repository without publishing results to snapstore.
          # --use-lxd applied to use a LXD container instead of a VM, to work around lack of support for KVM on CircleCI VMs.
          command: |
            set -x
            sudo apt-get update
            sudo apt-get install -y snapd
            sudo snap install snapcraft --classic
            sudo lxd init --minimal
            snapcraft --use-lxd
            ! command -v git-machete
            sudo snap install git-machete_*.snap --dangerous --classic
            git machete version
            sudo snap remove git-machete

      - deploy:
          name: '[Dry run] Build rpm package'
          # Side effects: potentially pushes a regenerated Docker image
          # Other than that, it just builds the package without publishing anything; there's no special dry-run mode
          command: bash ci/rpm/ci-run.sh

  "deploy from master":
    executor: ubuntu_executor
    steps:
      - checkout
      - deploy:
          name: 'Deploy to PyPI'
          command: bash ci/pypi/ci-deploy.sh

      - deploy:
          name: 'Update Homebrew tap'
          # Prerequisites: artifacts must be released to PyPI first
          command: bash ci/homebrew-tap/ci-deploy.sh

      - deploy:
          name: 'Build & upload deb package to PPA'
          command: bash ci/deb-ppa-upload/ci-deploy.sh

      - deploy:
          name: 'Build rpm package'
          command: bash ci/rpm/ci-run.sh

      # Let's do this at the very end to avoid opening a GH release (and notifying the watchers)
      # in case anything goes wrong in the previous steps.
      - deploy:
          name: 'Create GitHub release'
          # Prerequisites: RPM package must be in dist/
          command: |
            sudo apt-get update
            sudo apt-get install hub
            bash ci/github-releases/ci-deploy.sh

      # Note: there are also releases happening outside of our CI:
      # 1) every time a commit is pushed to `master`, a Snap build for `edge` channel
      #    is triggered automatically via GitHub webhook on https://build.snapcraft.io/user/VirtusLab/git-machete,
      # 2) every time a commit is pushed to `develop` or `master`, a build for docs (`latest` or `stable` version, respectively)
      #    is triggered automatically via GitHub webhook on https://readthedocs.org/projects/git-machete/builds/,
      # 3) every time a https://github.com/r-ryantm bot runs on NixOS/nixpkgs repository,
      #    Nix git-machete package is updated with the fresh version/package hash according to the data from PyPI.

  "Publish image to Docker Hub":
    working_directory: /git-machete
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - deploy:
          name: Publish application to docker hub
          command: |
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_LOGIN --password-stdin
            docker build -t gitmachete/git-machete:latest .
            docker push gitmachete/git-machete:latest

workflows:
  version: 2
  build:
    jobs:
      - initial checks
      - test against python 3_6 and git 1_8_10
      - test against python 3_7 and git 2_7_6
      - test against python 3_8 and git 2_25_0 with PEP8 checks
      - test against python 3_9 and git 2_30_1 with coverage report and docs creation
      - test against python 3_10 and git 2_33_1
      - dry run deploy:
          filters:
            branches:
              only:
                - "develop"
                - "bugfix/ci-user-id"
                - "/hotfix.*/"
          requires:
            *mandatory_jobs
      - deploy from master:
          filters:
            branches:
              only: "master"
          requires:
            *mandatory_jobs
      - Publish image to Docker Hub:
          filters:
            branches:
              only: "master"
          requires:
            *mandatory_jobs
