version: 2.1

executors:
  macos_executor:
    macos:
      xcode: 14.3.1
    resource_class: macos.x86.medium.gen2
  ubuntu_executor:
    machine:
      image: ubuntu-2204:2022.10.2
    environment:
      # Needed to avoid warning: https://superuser.com/questions/575844/warning-terminal-is-not-fully-functional
      TERM: ansi
    resource_class: large
  windows_executor:
    machine:
      image: windows-server-2022-gui:2023.03.1
      shell: bash.exe
    # Jobs using windows.large sometimes get stuck on `Preparing environment` :/
    resource_class: windows.medium

orbs:
  codecov: codecov/codecov@3.2.2

jobs:
  "general checks":
    executor: ubuntu_executor
    steps:
      - checkout
      - run:
          name: Install dependencies
          # language=sh
          command: |
            set -x

            # For completion tests

            # `add-apt-repository` was getting stuck on CI for some reason
            echo 'deb     https://ppa.launchpadcontent.net/fish-shell/release-3/ubuntu jammy main' | sudo tee -a /etc/apt/sources.list
            echo 'deb-src https://ppa.launchpadcontent.net/fish-shell/release-3/ubuntu jammy main' | sudo tee -a /etc/apt/sources.list
            sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 59FDA1CE1B84B3FAD89366C027557F056DC33CA5
            sudo apt-get update
            sudo apt-get install fish
            fish --version

            sudo apt-get install zsh

            pip3 install tox

            # For enforce-shell-scripts-pass-shellcheck.sh
            sudo apt-get install shellcheck

            # For enforce-links-correct.sh
            npm install --global remark-cli remark-lint-no-dead-urls remark-validate-links
      - run:
          name: Perform general checks
          command: ci/checks/run-all-checks.sh
      - run:
          name: Test shell completions
          command: tox -e test-completions -- -vv
      - store_test_results:
          path: test-results/

  # Earliest versions of python/git supported by git-machete
  "python 3_6 git 1_8_0":
    executor: ubuntu_executor
    steps:
      - checkout
      - run:
          name: Run tests against Python 3.6 and git 1.8.0
          command: PYTHON_VERSION=3.6 GIT_VERSION=1.8.0  bash ci/tox/ci-run.sh
      - store_test_results:
          path: test-results/
      - persist_to_workspace:
          root: .
          paths: [ .coverage.* ]

  "python 3_7 git 2_7_6":
    executor: ubuntu_executor
    steps:
      - checkout
      - run:
          name: Run tests against Python 3.7 and git 2.7.6
          command: PYTHON_VERSION=3.7 GIT_VERSION=2.7.6  bash ci/tox/ci-run.sh
      - store_test_results:
          path: test-results/
      - persist_to_workspace:
          root: .
          paths: [ .coverage.* ]

  "python 3_8 git 2_25_0":
    executor: ubuntu_executor
    steps:
      - checkout
      - run:
          name: Run tests against Python 3.8 and git 2.25.0
          command: PYTHON_VERSION=3.8 GIT_VERSION=2.25.0  bash ci/tox/ci-run.sh
      - store_test_results:
          path: test-results/
      - persist_to_workspace:
          root: .
          paths: [ .coverage.* ]

  "python 3_9 git 2_30_1":
    executor: ubuntu_executor
    steps:
      - checkout
      - run:
          name: Run tests against Python 3.9 and git 2.30.1
          command: PYTHON_VERSION=3.9 GIT_VERSION=2.30.1  bash ci/tox/ci-run.sh
      - store_test_results:
          path: test-results/
      - persist_to_workspace:
          root: .
          paths: [ .coverage.* ]

  # Note that there is no particular reason for the below assignment
  # of PEP8/docs checks to Python version, other than:
  #  - Python 3.6 being EOLed and hence not supporting the versions of packages used for the checks,
  #  - https://github.com/VirtusLab/git-machete/issues/936 apparently forcing the use of Python 3.11 for Sphinx HTML docs.
  # Each of these checks needs to be run against just one Python version
  # (since there's very little chance that they pass under one version but fail under another),
  # so let's spread these checks evenly across versions to reduce CI execution time
  # (when compared to the scenario where all checks are executed under the same Python version).

  "pep8 and python 3_10 git 2_33_1":
    executor: ubuntu_executor
    steps:
      - checkout
      - run:
          name: Run tests against Python 3.10 and git 2.33.1 (with isort/PEP8/vulture check)
          command: PYTHON_VERSION=3.10 GIT_VERSION=2.33.1 CHECK_PEP8=true  bash ci/tox/ci-run.sh
      - store_test_results:
          path: test-results/
      - persist_to_workspace:
          root: .
          paths: [ .coverage.* ]

  # Note that if docs are ever to be built under a different Python version in CI,
  # this change needs to be reflected in tox.ini and .readthedocs.yaml as well
  # to avoid errors like https://github.com/VirtusLab/git-machete/issues/936.
  "docs and python 3_11 git 2_38_1":
    executor: ubuntu_executor
    steps:
      - checkout
      - run:
          name: Run tests against Python 3.11 and git 2.38.1 (with building docs)
          command: PYTHON_VERSION=3.11 GIT_VERSION=2.38.1 BUILD_SPHINX_HTML=true CHECK_DOCS_UP_TO_DATE=true  bash ci/tox/ci-run.sh
      - store_test_results:
          path: test-results/
      - persist_to_workspace:
          root: .
          paths: [ .coverage.* ]
      - store_artifacts:
          path: docs/html/
          destination: docs

  "python 3_12 git 2_42_0":
    executor: ubuntu_executor
    steps:
      - checkout
      - run:
          name: Run tests against Python 3.12 and git 2.42.0
          command: PYTHON_VERSION=3.12 GIT_VERSION=2.42.0  bash ci/tox/ci-run.sh
      - store_test_results:
          path: test-results/
      - persist_to_workspace:
          root: .
          paths: [ .coverage.* ]

  # Note the while we use Linux executor to test against specific Python&git version,
  # on macOS and Windows we're just checking compatibility with the OS itself,
  # relying on whatever recent versions of Python and git are provided in the image.

  "macos tests":
    executor: macos_executor
    steps:
      - checkout
      - run: brew install fish zsh
      - run: pip install tox
      # TODO (#1005): make zsh completion tests pass on macOS machine on CI
      - run: tox -e test-completions -- -vv -k "not zsh"
      - run: PYTHON_VERSION=3.11-macos  tox -e coverage -- -vv
      - store_test_results:
          path: test-results/
      - persist_to_workspace:
          root: .
          paths: [ .coverage.* ]

  "windows tests":
    executor: windows_executor
    steps:
      - checkout
      - run: pip install tox
      # We don't collect coverage on Windows as it massively extends execution time for some reason.
      # See https://github.com/tox-dev/tox/issues/3092 for why `py` and not `testenv`.
      - run: tox -e py -- -vv
      - store_test_results:
          path: test-results/

  "coverage upload":
    executor: ubuntu_executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: pip3 install tox
      - run: tox -e coverage-combine
      - codecov/upload:
          file: coverage.xml

  "dry run deploy":
    executor: ubuntu_executor
    steps:
      - checkout

      - run:
          name: '[Dry run] Deploy to PyPI'
          # Side effects: does an actual release, but to the test PyPI
          command: bash ci/pypi/ci-deploy.sh --dry-run
      - run:
          name: '[Dry run] Wait up to 30 minutes for PyPI package to be available'
          command: bash ci/pypi/ci-wait-for-package.sh test.pypi.org 30

      - run:
          name: '[Dry run] Update Homebrew with local installation test'
          # Prerequisites: artifacts must be released to test PyPI first
          command: bash ci/homebrew/ci-deploy.sh --dry-run

      - run:
          name: '[Dry run] Publish image to Docker Hub'
          command: bash ci/docker/ci-deploy.sh --dry-run

      - run:
          name: '[Dry run] Build & upload deb package to PPA'
          # Side effects: potentially pushes a regenerated Docker image
          command: bash ci/deb-ppa-upload/ci-deploy.sh --dry-run

      - run:
          name: '[Dry run] Build Nix package'
          # Side effects: potentially pushes a regenerated Docker image
          # Other than that, it just builds the package without publishing anything; there's no special dry-run mode
          command: bash ci/nixpkgs-build/ci-run.sh

      - run:
          name: '[Dry run] Build snap'
          command: bash ci/snap/ci-deploy.sh --dry-run

      - run:
          name: '[Dry run] Build rpm package'
          # Side effects: potentially pushes a regenerated Docker image
          # Other than that, it just builds the package without publishing anything; there's no special dry-run mode
          command: bash ci/rpm/ci-run.sh

  "deploy to pypi":
    executor: ubuntu_executor
    steps:
      - checkout
      - run:
          name: 'Deploy to PyPI'
          command: bash ci/pypi/ci-deploy.sh

  "update homebrew formula":
    executor: ubuntu_executor
    steps:
      - checkout
      - run:
          # See https://github.com/Homebrew/homebrew-core/pull/119200/commits/a4902911fadbdcf2c6b64ce691024ff97a516f1c
          # for a case where the package wasn't available right after the upload and Homebrew Core build failed.
          name: 'Wait up to 30 minutes for PyPI package to be available'
          command: bash ci/pypi/ci-wait-for-package.sh pypi.org 30
      - run:
          name: 'Update Homebrew formula'
          command: bash ci/homebrew/ci-deploy.sh

  "publish image to docker hub":
    executor: ubuntu_executor
    steps:
      - checkout
      - run:
          name: 'Publish image to Docker Hub'
          command: bash ci/docker/ci-deploy.sh

  "build and upload deb package to ppa":
    executor: ubuntu_executor
    steps:
      - checkout
      - run:
          name: 'Build & upload deb package to PPA'
          command: bash ci/deb-ppa-upload/ci-deploy.sh

  "publish snap to the stable channel":
    executor: ubuntu_executor
    steps:
      - checkout
      - run:
          name: 'Publish snap to the stable channel'
          command: bash ci/snap/ci-deploy.sh

  "build rpm package and create github release":
    executor: ubuntu_executor
    steps:
      - checkout
      - run:
          name: 'Build rpm package'
          command: bash ci/rpm/ci-run.sh
      # Let's do this at the very end to avoid opening a GH release (and notifying the watchers)
      # in case anything goes wrong in the previous steps.
      - run:
          name: 'Create GitHub release'
          # Prerequisites: RPM package must be in dist/
          # language=sh
          command: |
            sudo apt-get update
            sudo apt-get install hub
            bash ci/github-releases/ci-deploy.sh


# Note that these top-level keys are NOT consumed by CircleCI,
# they're just to introduce reusable anchors to be referenced further down the line.
test_jobs: &test_jobs
  - general checks
  - python 3_6 git 1_8_0
  - python 3_7 git 2_7_6
  - python 3_8 git 2_25_0
  - python 3_9 git 2_30_1
  - pep8 and python 3_10 git 2_33_1
  - docs and python 3_11 git 2_38_1
  - python 3_12 git 2_42_0
  - macos tests
  - windows tests

only_master: &only_master
  filters:
    branches:
      only: "master"

workflows:
  version: 2
  build:
    jobs:
      - general checks
      - python 3_6 git 1_8_0
      - python 3_7 git 2_7_6
      - python 3_8 git 2_25_0
      - python 3_9 git 2_30_1
      - pep8 and python 3_10 git 2_33_1
      - docs and python 3_11 git 2_38_1
      - python 3_12 git 2_42_0
      - macos tests
      - windows tests
      - coverage upload:
          requires:
            *test_jobs
      - dry run deploy:
          filters:
            branches:
              only:
                - "develop"
                - "/hotfix.*/"
                - "master"
          requires:
            *test_jobs

      # Let's keep each deployment in a separate job (rather than in separate step of a single job),
      # so that CircleCI allows for re-running just the failed deployments in case of transient failure.
      - deploy to pypi:
          <<: *only_master
          requires:
            - dry run deploy
      - update homebrew formula:
          <<: *only_master
          requires:
            - deploy to pypi
      - publish image to docker hub:
          <<: *only_master
          requires:
            - dry run deploy
      - build and upload deb package to ppa:
          <<: *only_master
          requires:
            - dry run deploy
      - publish snap to the stable channel:
          <<: *only_master
          requires:
            - dry run deploy
      # Let's do this at the very end to avoid opening a GH release (and notifying the watchers)
      # in case anything goes wrong in the previous steps.
      - build rpm package and create github release:
          <<: *only_master
          requires:
            - deploy to pypi
            - update homebrew formula
            - publish image to docker hub
            - build and upload deb package to ppa
            - publish snap to the stable channel

      # Note: there are also releases happening outside of our CI, see PACKAGES.md
