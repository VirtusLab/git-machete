version: 2.1

executors:
  ubuntu_executor:
    machine:
      image: ubuntu-2204:2022.10.2
    environment:
      # Needed to avoid warning: https://superuser.com/questions/575844/warning-terminal-is-not-fully-functional
      TERM: ansi
    resource_class: large

orbs:
  codecov: codecov/codecov@3.2.2

jobs:
  "general checks":
    executor: ubuntu_executor
    steps:
      - checkout
      - run:
          name: Install dependencies
          # language=sh
          command: |
            sudo apt-get update

            # For enforce-completion-scripts-correct.sh
            sudo apt-get install zsh fish

            # For enforce-shell-scripts-pass-shellcheck.sh
            sudo apt-get install shellcheck

            # For enforce-links-correct.sh
            npm install --global remark-cli remark-lint-no-dead-urls remark-validate-links
      - run:
          name: Perform general checks
          command: ci/checks/run-all-checks.sh

  # Earliest versions of python/git supported by git-machete
  "python 3_6 git 1_8_10":
    executor: ubuntu_executor
    steps:
      - checkout
      - run:
          name: Run tests against Python 3.6 and git 1.8.0
          command: PYTHON_VERSION=3.6 GIT_VERSION=1.8.0  bash ci/tox/ci-run.sh
      - store_test_results:
          path: test-results/

  "python 3_7 git 2_7_6":
    executor: ubuntu_executor
    steps:
      - checkout
      - run:
          name: Run tests against Python 3.7 and git 2.7.6
          command: PYTHON_VERSION=3.7 GIT_VERSION=2.7.6  bash ci/tox/ci-run.sh
      - store_test_results:
          path: test-results/

  # Note that there is no particular reason for the below assignment of PEP8/coverage/docs checks to Python version
  # (other than Python 3.6 being EOLed and hence not supporting the versions of packages used for the checks).
  # Each of these needs to be run against just one Python version
  # (since there's very little chance that they pass under one version but fail under another),
  # so let's spread these checks evenly across versions to reduce CI latency
  # (when compared to the scenario where all checks are executed under the same Python version).

  "pep8 and python 3_8 git 2_25_0":
    executor: ubuntu_executor
    steps:
      - checkout
      - run:
          name: Run tests against Python 3.8 and git 2.25.0 (with PEP8 check)
          command: PYTHON_VERSION=3.8 GIT_VERSION=2.25.0 CHECK_PEP8=true  bash ci/tox/ci-run.sh
      - store_test_results:
          path: test-results/

  "coverage and python 3_9 git 2_30_1":
    executor: ubuntu_executor
    steps:
      - checkout
      - run:
          name: Run tests against Python 3.9 and git 2.30.1 (with coverage report)
          command: PYTHON_VERSION=3.9 GIT_VERSION=2.30.1 CHECK_COVERAGE=true  bash ci/tox/ci-run.sh
      - store_test_results:
          path: test-results/
      - codecov/upload:
          file: coverage.xml

  "docs and python 3_10 git 2_33_1":
    executor: ubuntu_executor
    steps:
      - checkout
      - run:
          name: Run tests against Python 3.10 and git 2.33.1 (with building docs)
          command: PYTHON_VERSION=3.10 GIT_VERSION=2.33.1 BUILD_SPHINX_HTML=true CHECK_DOCS_UP_TO_DATE=true bash ci/tox/ci-run.sh
      - store_test_results:
          path: test-results/
      - store_artifacts:
          path: docs/html/
          destination: docs

  "python 3_11 git 2_38_1":
    executor: ubuntu_executor
    steps:
      - checkout
      - run:
          name: Run tests against Python 3.11 and git 2.38.1
          command: PYTHON_VERSION=3.11 GIT_VERSION=2.38.1 bash ci/tox/ci-run.sh
      - store_test_results:
          path: test-results/

  "dry run deploy":
    executor: ubuntu_executor
    steps:
      - checkout

      - run:
          name: '[Dry run] Deploy to PyPI'
          # Side effects: does an actual release, but to the test PyPI
          command: bash ci/pypi/ci-deploy.sh --dry-run
      - run:
          name: '[Dry run] Wait up to 30 minutes for PyPI package to be available'
          command: bash ci/pypi/ci-wait-for-package.sh test.pypi.org 30

      - run:
          name: '[Dry run] Update Homebrew with local installation test'
          # Prerequisites: artifacts must be released to test PyPI first
          command: bash ci/homebrew/ci-deploy.sh --dry-run

      - run:
          name: '[Dry run] Publish image to Docker Hub'
          command: bash ci/docker/ci-deploy.sh --dry-run

      - run:
          name: '[Dry run] Build & upload deb package to PPA'
          # Side effects: potentially pushes a regenerated Docker image
          command: bash ci/deb-ppa-upload/ci-deploy.sh --dry-run

      - run:
          name: '[Dry run] Build Nix package'
          # Side effects: potentially pushes a regenerated Docker image
          # Other than that, it just builds the package without publishing anything; there's no special dry-run mode
          command: bash ci/nixpkgs-build/ci-run.sh

      - run:
          name: '[Dry run] Build snap'
          command: bash ci/snap/ci-deploy.sh --dry-run

      - run:
          name: '[Dry run] Build rpm package'
          # Side effects: potentially pushes a regenerated Docker image
          # Other than that, it just builds the package without publishing anything; there's no special dry-run mode
          command: bash ci/rpm/ci-run.sh

  "deploy from master":
    executor: ubuntu_executor
    steps:
      - checkout

      - run:
          name: 'Deploy to PyPI'
          command: bash ci/pypi/ci-deploy.sh
      - run:
          # See https://github.com/Homebrew/homebrew-core/pull/119200/commits/a4902911fadbdcf2c6b64ce691024ff97a516f1c
          # for a case where the package wasn't available right after the upload and Homebrew Core build failed.
          name: 'Wait up to 30 minutes for PyPI package to be available'
          command: bash ci/pypi/ci-wait-for-package.sh pypi.org 30

      - run:
          name: 'Update Homebrew formula'
          # Prerequisites: artifacts must be released to PyPI first
          command: bash ci/homebrew/ci-deploy.sh

      - run:
          name: 'Publish image to Docker Hub'
          command: bash ci/docker/ci-deploy.sh

      - run:
          name: 'Build & upload deb package to PPA'
          command: bash ci/deb-ppa-upload/ci-deploy.sh

      - run:
          name: 'Publish snap to the stable channel'
          command: bash ci/snap/ci-deploy.sh

      - run:
          name: 'Build rpm package'
          command: bash ci/rpm/ci-run.sh

      # Let's do this at the very end to avoid opening a GH release (and notifying the watchers)
      # in case anything goes wrong in the previous steps.
      - run:
          name: 'Create GitHub release'
          # Prerequisites: RPM package must be in dist/
          # language=sh
          command: |
            sudo apt-get update
            sudo apt-get install hub
            bash ci/github-releases/ci-deploy.sh

      # Note: there are also releases happening outside of our CI:
      # 1) every time a commit is pushed to `develop` or `master`, a build for docs (`latest` or `stable` version, respectively)
      #    is triggered automatically via GitHub webhook on https://readthedocs.org/projects/git-machete/builds/,
      # 2) every time a https://github.com/r-ryantm bot runs on NixOS/nixpkgs repository,
      #    Nix git-machete package is updated with the fresh version/package hash according to the data from PyPI.

mandatory_jobs: &mandatory_jobs
  - general checks
  - python 3_6 git 1_8_10
  - python 3_7 git 2_7_6
  - pep8 and python 3_8 git 2_25_0
  - coverage and python 3_9 git 2_30_1
  - docs and python 3_10 git 2_33_1
  - python 3_11 git 2_38_1

workflows:
  version: 2
  build:
    jobs:
      - general checks
      - python 3_6 git 1_8_10
      - python 3_7 git 2_7_6
      - pep8 and python 3_8 git 2_25_0
      - coverage and python 3_9 git 2_30_1
      - docs and python 3_10 git 2_33_1
      - python 3_11 git 2_38_1
      - dry run deploy:
          filters:
            branches:
              only:
                - "develop"
                - "/hotfix.*/"
          requires:
            *mandatory_jobs
      - deploy from master:
          filters:
            branches:
              only: "master"
          requires:
            *mandatory_jobs
