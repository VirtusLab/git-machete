version: 2.1

executors:
  ubuntu_executor:
    machine:
      # https://circleci.com/developer/images?imageType=machine
      image: ubuntu-2204:2024.01.1
    environment:
      # Needed to avoid warning: https://superuser.com/questions/575844/warning-terminal-is-not-fully-functional
      TERM: ansi
    resource_class: large
  windows_executor:
    machine:
      # https://circleci.com/developer/images?imageType=machine
      image: windows-server-2022-gui:2024.01.1
      shell: bash.exe
    resource_class: windows.large

orbs:
  codecov: codecov/codecov@4.0.1

jobs:
  "general checks":
    executor: ubuntu_executor
    steps:
      - checkout
      - run:
          name: Install dependencies
          # language=sh
          command: |
            set -x
            python --version

            pip3 install tox

            # For completion tests

            # `add-apt-repository` was getting stuck on CI for some reason
            echo 'deb     https://ppa.launchpadcontent.net/fish-shell/release-3/ubuntu jammy main' | sudo tee -a /etc/apt/sources.list
            echo 'deb-src https://ppa.launchpadcontent.net/fish-shell/release-3/ubuntu jammy main' | sudo tee -a /etc/apt/sources.list
            sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 59FDA1CE1B84B3FAD89366C027557F056DC33CA5
            sudo apt-get update
            sudo apt-get install fish
            fish --version

            sudo apt-get install zsh

            # For enforce-shell-scripts-pass-shellcheck.sh
            sudo apt-get install shellcheck

            # For enforce-links-correct.sh
            npm install --global remark-cli remark-lint-no-dead-urls remark-validate-links
      - run:
          name: Perform general checks
          command: ci/checks/run-all-checks.sh
      - run:
          name: Check code style
          command: tox -e isort-check,pep8-check,typos-check,vulture-check
      - run:
          name: Verify docs
          command: tox -e py-docs-check,sphinx-man-check,sphinx-html
      - store_artifacts:
          path: docs/html/
          destination: docs
      - run:
          name: Test shell completions
          command: tox -e test-completions -- -vv
      - store_test_results:
          path: test-results/

  # Earliest versions of python/git supported by git-machete
  "python 3_6 git 1_8_0":
    executor: ubuntu_executor
    steps:
      - checkout
      - run:
          name: Run tests against Python 3.6 and git 1.8.0
          command: PYTHON_VERSION=3.6 GIT_VERSION=1.8.0  bash ci/tox/ci-run.sh
      - store_test_results:
          path: test-results/
      - persist_to_workspace:
          root: .
          paths: [ .coverage.* ]

  "python 3_7 git 2_7_6":
    executor: ubuntu_executor
    steps:
      - checkout
      - run:
          name: Run tests against Python 3.7 and git 2.7.6
          command: PYTHON_VERSION=3.7 GIT_VERSION=2.7.6  bash ci/tox/ci-run.sh
      - store_test_results:
          path: test-results/
      - persist_to_workspace:
          root: .
          paths: [ .coverage.* ]

  "python 3_8 git 2_25_0":
    executor: ubuntu_executor
    steps:
      - checkout
      - run:
          name: Run tests against Python 3.8 and git 2.25.0
          command: PYTHON_VERSION=3.8 GIT_VERSION=2.25.0  bash ci/tox/ci-run.sh
      - store_test_results:
          path: test-results/
      - persist_to_workspace:
          root: .
          paths: [ .coverage.* ]

  "python 3_9 git 2_30_1":
    executor: ubuntu_executor
    steps:
      - checkout
      - run:
          name: Run tests against Python 3.9 and git 2.30.1
          command: PYTHON_VERSION=3.9 GIT_VERSION=2.30.1  bash ci/tox/ci-run.sh
      - store_test_results:
          path: test-results/
      - persist_to_workspace:
          root: .
          paths: [ .coverage.* ]

  "python 3_10 git 2_33_1":
    executor: ubuntu_executor
    steps:
      - checkout
      - run:
          name: Run tests against Python 3.10 and git 2.33.1
          command: PYTHON_VERSION=3.10 GIT_VERSION=2.33.1  bash ci/tox/ci-run.sh
      - store_test_results:
          path: test-results/
      - persist_to_workspace:
          root: .
          paths: [ .coverage.* ]

  # Note that if docs are ever to be built under a different Python version in CI,
  # this change needs to be reflected in tox.ini and .readthedocs.yaml as well
  # to avoid errors like https://github.com/VirtusLab/git-machete/issues/936.
  "python 3_11 git 2_38_1":
    executor: ubuntu_executor
    steps:
      - checkout
      - run:
          name: Run tests against Python 3.11 and git 2.38.1
          command: PYTHON_VERSION=3.11 GIT_VERSION=2.38.1  bash ci/tox/ci-run.sh
      - store_test_results:
          path: test-results/
      - persist_to_workspace:
          root: .
          paths: [ .coverage.* ]

  # v2.46.1 needs to be covered as it introduced a bug in `git patch-id` (see issue #1329), already fixed in v2.46.2
  "python 3_12 git 2_46_1":
    executor: ubuntu_executor
    steps:
      - checkout
      - run:
          name: Run tests against Python 3.12 and git 2.46.1
          command: PYTHON_VERSION=3.12 GIT_VERSION=2.46.1  bash ci/tox/ci-run.sh
      - store_test_results:
          path: test-results/
      - persist_to_workspace:
          root: .
          paths: [ .coverage.* ]

  "python 3_13 git 2_47_0":
    executor: ubuntu_executor
    steps:
      - checkout
      - run:
          name: Run tests against Python 3.13 and git 2.47.0
          command: PYTHON_VERSION=3.13 GIT_VERSION=2.47.0  bash ci/tox/ci-run.sh
      - store_test_results:
          path: test-results/
      - persist_to_workspace:
          root: .
          paths: [ .coverage.* ]

  # As of July 2024, there's no free macOS machine available on CircleCI :/
  # See https://discuss.circleci.com/t/macos-intel-support-deprecation-in-january-2024/48718

  # Note the while we use Linux executor to test against specific Python&git version,
  # on Windows we're just checking compatibility with the OS itself,
  # relying on whatever recent versions of Python and git are provided in the image.

  "windows tests":
    executor: windows_executor
    steps:
      - checkout
      - run: pip install tox
      - run: PYTHON_VERSION=3-windows tox -e coverage -- -vv
      - store_test_results:
          path: test-results/
      - persist_to_workspace:
          root: .
          paths: [ .coverage.* ]

  "coverage upload":
    executor: ubuntu_executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: pip3 install tox
      - run: tox -e coverage-combine
      - codecov/upload:
          file: coverage.xml

  "dry run releases":
    executor: ubuntu_executor
    steps:
      - checkout

      - run:
          name: '[Dry run] Publish to PyPI'
          # Side effects: does an actual release, but to the test PyPI
          command: bash ci/pypi/ci-deploy.sh --dry-run

      - run:
          name: '[Dry run] Build Arch Linux package'
          # Side effects: potentially pushes a regenerated Docker image
          command: bash ci/aur/ci-run.sh --dry-run

      - run:
          name: '[Dry run] Build & upload deb package to PPA'
          # Side effects: potentially pushes a regenerated Docker image
          command: bash ci/deb-ppa-upload/ci-deploy.sh --dry-run

      - run:
          name: '[Dry run] Build Nix package'
          # Side effects: potentially pushes a regenerated Docker image
          # Other than that, it just builds the package without publishing anything; there's no special dry-run mode
          command: bash ci/nixpkgs-build/ci-run.sh

      - run:
          name: '[Dry run] Build snap'
          command: bash ci/snap/ci-deploy.sh --dry-run

  "publish to pypi":
    executor: ubuntu_executor
    steps:
      - checkout
      - run:
          name: 'Publish to PyPI'
          command: bash ci/pypi/ci-deploy.sh

  "build and upload deb package to ppa":
    executor: ubuntu_executor
    steps:
      - checkout
      - run:
          name: 'Build & upload deb package to PPA'
          command: bash ci/deb-ppa-upload/ci-deploy.sh

  "publish snap to the stable channel":
    executor: ubuntu_executor
    steps:
      - checkout
      - run:
          name: 'Publish snap to the stable channel'
          command: bash ci/snap/ci-deploy.sh

  "create github release":
    executor: ubuntu_executor
    steps:
      - checkout
      - run:
          name: 'Create GitHub release'
          # language=sh
          command: |
            sudo apt-get update
            sudo apt-get install hub
            bash ci/github-releases/ci-deploy.sh


# Note that these top-level keys are NOT consumed by CircleCI,
# they're just to introduce reusable anchors to be referenced further down the line.
test_jobs: &test_jobs
  - general checks
  - python 3_6 git 1_8_0
  - python 3_7 git 2_7_6
  - python 3_8 git 2_25_0
  - python 3_9 git 2_30_1
  - python 3_10 git 2_33_1
  - python 3_11 git 2_38_1
  - python 3_12 git 2_46_1
  - python 3_13 git 2_47_0
  - windows tests

only_master: &only_master
  filters:
    branches:
      only: "master"

workflows:
  version: 2
  build:
    jobs:
      - general checks
      - python 3_6 git 1_8_0
      - python 3_7 git 2_7_6
      - python 3_8 git 2_25_0
      - python 3_9 git 2_30_1
      - python 3_10 git 2_33_1
      - python 3_11 git 2_38_1
      - python 3_12 git 2_46_1
      - python 3_13 git 2_47_0
      - windows tests
      - coverage upload:
          requires:
            *test_jobs
      - dry run releases:
          filters:
            branches:
              only:
                - "/.*(ci|deploy|dry-run|publish|release).*/"
                - "/dependabot.pip.*/"
                - "develop"
                - "/hotfix.*/"
                - "master"
          requires:
            *test_jobs

      # Let's keep each release in a separate job (rather than in separate step of a single job),
      # so that CircleCI allows for re-running just the failed releases in case of a transient failure.
      - publish to pypi:
          <<: *only_master
          requires:
            - dry run releases
      - build and upload deb package to ppa:
          <<: *only_master
          requires:
            - dry run releases
      - publish snap to the stable channel:
          <<: *only_master
          requires:
            - dry run releases
      # Let's perform a GitHub release even if some of the preceding release steps failed,
      # to keep GitHub release history consistent
      - create github release:
          <<: *only_master
          requires:
            - dry run releases

      # Note: there are also releases happening outside of our CI, see PACKAGES.md
